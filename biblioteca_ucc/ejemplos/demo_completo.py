"""
Script de demostraci√≥n del Sistema de Biblioteca UCC
Demuestra la aplicaci√≥n de los tres patrones de dise√±o principales:
- Factory Method: Creaci√≥n de diferentes tipos de recursos
- Decorator: A√±adir servicios a pr√©stamos de forma din√°mica
- Strategy: Cambiar algoritmos de c√°lculo de multas
"""

from datetime import datetime, timedelta

# Importar componentes del sistema
from recursos import (
    FabricaLibroImpreso,
    FabricaRevista,
    FabricaRecursoDigital,
    GestorDeInventario
)
from prestamos import PrestamoBase
from decoradores import (
    DecoradorNotificacionSMS,
    DecoradorReservaPreferencial,
    DecoradorSeguroExtravio
)
from estrategias import (
    MultaEstudianteStrategy,
    MultaDocenteStrategy,
    MultaPorAntiguedadRecursoStrategy
)


def imprimir_separador(titulo: str = ""):
    """Imprime un separador visual."""
    print("\n" + "=" * 80)
    if titulo:
        print(f"  {titulo}")
        print("=" * 80)


def imprimir_subseccion(titulo: str):
    """Imprime un t√≠tulo de subsecci√≥n."""
    print(f"\n{'‚îÄ' * 80}")
    print(f"  {titulo}")
    print("‚îÄ" * 80)


def demostrar_factory_method():
    """Demuestra el patr√≥n Factory Method para crear recursos."""
    imprimir_separador("PATR√ìN FACTORY METHOD - Creaci√≥n de Recursos")
    
    gestor = GestorDeInventario()
    
    print("\nüìö Creando recursos usando diferentes f√°bricas...")
    
    # Crear libro impreso
    print("\n1. F√°brica de Libros Impresos:")
    fabrica_libro = FabricaLibroImpreso()
    libro = gestor.agregar_recurso_con_fabrica(
        fabrica_libro,
        titulo="Patrones de Dise√±o",
        autor="Gamma, Helm, Johnson, Vlissides",
        isbn="978-0201633610",
        fecha_adquisicion=datetime.now() - timedelta(days=365 * 3),  # 3 a√±os
        numero_paginas=395,
        editorial="Addison-Wesley"
    )
    
    # Crear revista
    print("\n2. F√°brica de Revistas:")
    fabrica_revista = FabricaRevista()
    revista = gestor.agregar_recurso_con_fabrica(
        fabrica_revista,
        titulo="IEEE Software",
        autor="IEEE Computer Society",
        isbn="978-1234567890",
        fecha_adquisicion=datetime.now() - timedelta(days=30),
        numero_edicion=6,
        mes_publicacion="Octubre 2025"
    )
    
    # Crear recurso digital
    print("\n3. F√°brica de Recursos Digitales:")
    fabrica_digital = FabricaRecursoDigital()
    recurso_digital = gestor.agregar_recurso_con_fabrica(
        fabrica_digital,
        titulo="Clean Code: A Handbook of Agile Software Craftsmanship",
        autor="Robert C. Martin",
        isbn="978-0132350884",
        fecha_adquisicion=datetime.now() - timedelta(days=365 * 6),  # 6 a√±os
        formato="PDF",
        tama√±o_mb=2.5,
        url_acceso="https://biblioteca.ucc.edu.co/recursos/clean-code.pdf"
    )
    
    # Listar todos los recursos
    gestor.listar_recursos()
    
    return gestor, libro, revista, recurso_digital


def demostrar_decorator():
    """Demuestra el patr√≥n Decorator para a√±adir servicios a pr√©stamos."""
    imprimir_separador("PATR√ìN DECORATOR - Servicios Adicionales de Pr√©stamo")
    
    # Crear un gestor y un libro para el ejemplo
    gestor = GestorDeInventario()
    fabrica_libro = FabricaLibroImpreso()
    libro = gestor.agregar_recurso_con_fabrica(
        fabrica_libro,
        titulo="El Programador Pragm√°tico",
        autor="Andrew Hunt, David Thomas",
        isbn="978-0135957059",
        fecha_adquisicion=datetime.now() - timedelta(days=365 * 2),
        numero_paginas=352,
        editorial="Addison-Wesley"
    )
    
    print("\nüìã Creando pr√©stamos con diferentes combinaciones de servicios...\n")
    
    # 1. Pr√©stamo simple
    imprimir_subseccion("1. Pr√©stamo Base (sin servicios adicionales)")
    prestamo_simple = PrestamoBase(
        recurso=libro,
        usuario="Juan P√©rez (Estudiante)",
        estrategia_multa=MultaEstudianteStrategy()
    )
    print(prestamo_simple)
    
    # 2. Pr√©stamo con notificaci√≥n SMS
    imprimir_subseccion("2. Pr√©stamo + Notificaci√≥n SMS")
    libro.cambiar_disponibilidad(True)  # Hacer disponible nuevamente
    prestamo_base = PrestamoBase(
        recurso=libro,
        usuario="Mar√≠a Gonz√°lez (Estudiante)",
        estrategia_multa=MultaEstudianteStrategy()
    )
    prestamo_con_sms = DecoradorNotificacionSMS(prestamo_base, "+57-300-1234567")
    print(prestamo_con_sms)
    prestamo_con_sms.notificar_proximo_vencimiento()
    
    # 3. Pr√©stamo con m√∫ltiples decoradores
    imprimir_subseccion("3. Pr√©stamo + SMS + Reserva Preferencial + Seguro")
    libro.cambiar_disponibilidad(True)
    prestamo_base2 = PrestamoBase(
        recurso=libro,
        usuario="Dr. Carlos Ram√≠rez (Docente)",
        estrategia_multa=MultaDocenteStrategy()
    )
    
    # Aplicar decoradores en cadena
    prestamo_con_sms2 = DecoradorNotificacionSMS(prestamo_base2, "+57-300-9876543")
    prestamo_con_reserva = DecoradorReservaPreferencial(prestamo_con_sms2, prioridad=3)
    prestamo_completo = DecoradorSeguroExtravio(prestamo_con_reserva, monto_cobertura=150000.0)
    
    print(prestamo_completo)
    print(f"\nüìä Resumen del pr√©stamo decorado:")
    print(f"   - Duraci√≥n total: {prestamo_completo.obtener_duracion_dias()} d√≠as")
    print(f"   - Costo total: ${prestamo_completo.obtener_costo_base():.2f}")
    print(f"   - Fecha devoluci√≥n: {prestamo_completo.obtener_fecha_devolucion().strftime('%Y-%m-%d')}")
    
    return prestamo_con_sms


def demostrar_strategy():
    """Demuestra el patr√≥n Strategy para c√°lculo de multas."""
    imprimir_separador("PATR√ìN STRATEGY - C√°lculo Din√°mico de Multas")
    
    # Crear recursos de diferentes antig√ºedades
    gestor = GestorDeInventario()
    fabrica = FabricaLibroImpreso()
    
    libro_nuevo = gestor.agregar_recurso_con_fabrica(
        fabrica,
        titulo="Arquitectura Limpia",
        autor="Robert C. Martin",
        isbn="978-0134494166",
        fecha_adquisicion=datetime.now() - timedelta(days=180),  # 6 meses
        numero_paginas=432,
        editorial="Prentice Hall"
    )
    
    libro_antiguo = gestor.agregar_recurso_con_fabrica(
        fabrica,
        titulo="The Mythical Man-Month",
        autor="Frederick P. Brooks Jr.",
        isbn="978-0201835953",
        fecha_adquisicion=datetime.now() - timedelta(days=365 * 7),  # 7 a√±os
        numero_paginas=336,
        editorial="Addison-Wesley"
    )
    
    print("\nüí∞ Comparando diferentes estrategias de multa...\n")
    
    dias_retraso = 10
    
    # Crear estrategias
    estrategia_estudiante = MultaEstudianteStrategy()
    estrategia_docente = MultaDocenteStrategy()
    estrategia_antiguedad = MultaPorAntiguedadRecursoStrategy()
    
    # Probar con libro nuevo
    imprimir_subseccion(f"Libro Nuevo (6 meses) - {dias_retraso} d√≠as de retraso")
    prestamo_nuevo = PrestamoBase(libro_nuevo, "Estudiante Test", estrategia_estudiante)
    
    # Simular retraso modificando la fecha de pr√©stamo
    prestamo_nuevo._fecha_prestamo = datetime.now() - timedelta(
        days=libro_nuevo.obtener_duracion_prestamo_base() + dias_retraso
    )
    
    print(f"\n1. {estrategia_estudiante.obtener_nombre_estrategia()}:")
    multa1 = prestamo_nuevo.calcular_multa()
    print(f"   üíµ Multa: ${multa1:.2f}")
    
    prestamo_nuevo.establecer_estrategia_multa(estrategia_docente)
    print(f"\n2. {estrategia_docente.obtener_nombre_estrategia()}:")
    multa2 = prestamo_nuevo.calcular_multa()
    print(f"   üíµ Multa: ${multa2:.2f}")
    
    prestamo_nuevo.establecer_estrategia_multa(estrategia_antiguedad)
    print(f"\n3. {estrategia_antiguedad.obtener_nombre_estrategia()}:")
    multa3 = prestamo_nuevo.calcular_multa()
    print(f"   üíµ Multa: ${multa3:.2f}")
    
    # Probar con libro antiguo
    imprimir_subseccion(f"Libro Antiguo (7 a√±os) - {dias_retraso} d√≠as de retraso")
    prestamo_antiguo = PrestamoBase(libro_antiguo, "Estudiante Test", estrategia_estudiante)
    prestamo_antiguo._fecha_prestamo = datetime.now() - timedelta(
        days=libro_antiguo.obtener_duracion_prestamo_base() + dias_retraso
    )
    
    print(f"\n1. {estrategia_estudiante.obtener_nombre_estrategia()}:")
    multa4 = prestamo_antiguo.calcular_multa()
    print(f"   üíµ Multa: ${multa4:.2f}")
    
    prestamo_antiguo.establecer_estrategia_multa(estrategia_docente)
    print(f"\n2. {estrategia_docente.obtener_nombre_estrategia()}:")
    multa5 = prestamo_antiguo.calcular_multa()
    print(f"   üíµ Multa: ${multa5:.2f}")
    
    prestamo_antiguo.establecer_estrategia_multa(estrategia_antiguedad)
    print(f"\n3. {estrategia_antiguedad.obtener_nombre_estrategia()}:")
    multa6 = prestamo_antiguo.calcular_multa()
    print(f"   üíµ Multa: ${multa6:.2f}")


def escenario_obligatorio():
    """
    ESCENARIO DE PRUEBA OBLIGATORIO:
    Demostrar que el sistema calcula una multa diferente (usando dos Estrategias distintas)
    para un LibroImpreso que tiene una Notificaci√≥nSMS adjunta.
    """
    imprimir_separador("üéØ ESCENARIO DE PRUEBA OBLIGATORIO")
    
    print("\nObjetivo: Calcular multas diferentes para un LibroImpreso con Notificaci√≥nSMS")
    print("usando dos estrategias distintas.\n")
    
    # 1. Crear libro impreso
    gestor = GestorDeInventario()
    fabrica = FabricaLibroImpreso()
    
    print("üìö PASO 1: Crear LibroImpreso")
    libro = gestor.agregar_recurso_con_fabrica(
        fabrica,
        titulo="Refactoring: Improving the Design of Existing Code",
        autor="Martin Fowler",
        isbn="978-0134757599",
        fecha_adquisicion=datetime.now() - timedelta(days=365 * 4),  # 4 a√±os
        numero_paginas=448,
        editorial="Addison-Wesley"
    )
    
    # 2. Crear pr√©stamo base
    print("\nüìã PASO 2: Crear Pr√©stamo Base")
    prestamo_base = PrestamoBase(
        recurso=libro,
        usuario="Laura Mart√≠nez (Estudiante)",
        estrategia_multa=MultaEstudianteStrategy()  # Estrategia inicial
    )
    print(f"   ‚úì Pr√©stamo creado para: {prestamo_base.usuario}")
    print(f"   ‚úì Estrategia inicial: {prestamo_base.estrategia_multa.obtener_nombre_estrategia()}")
    
    # 3. Decorar con Notificaci√≥nSMS
    print("\nüì± PASO 3: Decorar con Notificaci√≥nSMS")
    prestamo_con_sms = DecoradorNotificacionSMS(prestamo_base, "+57-311-5555555")
    print(f"   ‚úì {prestamo_con_sms.obtener_descripcion()}")
    print(f"   ‚úì Costo base (con SMS): ${prestamo_con_sms.obtener_costo_base():.2f}")
    print(f"   ‚úì Duraci√≥n: {prestamo_con_sms.obtener_duracion_dias()} d√≠as")
    
    # 4. Simular retraso de 8 d√≠as
    dias_retraso = 8
    print(f"\n‚è∞ PASO 4: Simular retraso de {dias_retraso} d√≠as")
    prestamo_base._fecha_prestamo = datetime.now() - timedelta(
        days=libro.obtener_duracion_prestamo_base() + dias_retraso
    )
    print(f"   ‚úì Fecha de pr√©stamo ajustada")
    print(f"   ‚úì Fecha l√≠mite de devoluci√≥n: {prestamo_con_sms.obtener_fecha_devolucion().strftime('%Y-%m-%d')}")
    print(f"   ‚úì D√≠as de retraso: {dias_retraso}")
    
    # 5. Calcular multa con Estrategia de Estudiante
    imprimir_subseccion("C√ÅLCULO 1: Estrategia de Multa para Estudiantes")
    estrategia1 = MultaEstudianteStrategy()
    prestamo_base.establecer_estrategia_multa(estrategia1)
    
    print(f"Estrategia: {estrategia1.obtener_nombre_estrategia()}")
    print(f"Recurso: {libro.titulo}")
    print(f"Antig√ºedad del recurso: {libro.calcular_antiguedad_dias()} d√≠as ({libro.calcular_antiguedad_dias() / 365:.1f} a√±os)")
    print(f"D√≠as de retraso: {dias_retraso}")
    print(f"Costo base del pr√©stamo (con servicios): ${prestamo_con_sms.obtener_costo_base():.2f}")
    
    multa1 = prestamo_base.calcular_multa()
    print(f"\nüíµ MULTA CALCULADA: ${multa1:.2f}")
    
    # 6. Cambiar a Estrategia de Docente
    imprimir_subseccion("C√ÅLCULO 2: Estrategia de Multa para Docentes")
    estrategia2 = MultaDocenteStrategy()
    prestamo_base.establecer_estrategia_multa(estrategia2)
    
    print(f"Estrategia: {estrategia2.obtener_nombre_estrategia()}")
    print(f"Recurso: {libro.titulo}")
    print(f"Antig√ºedad del recurso: {libro.calcular_antiguedad_dias()} d√≠as ({libro.calcular_antiguedad_dias() / 365:.1f} a√±os)")
    print(f"D√≠as de retraso: {dias_retraso}")
    print(f"Costo base del pr√©stamo (con servicios): ${prestamo_con_sms.obtener_costo_base():.2f}")
    
    multa2 = prestamo_base.calcular_multa()
    print(f"\nüíµ MULTA CALCULADA: ${multa2:.2f}")
    
    # 7. Comparaci√≥n final
    imprimir_subseccion("COMPARACI√ìN DE RESULTADOS")
    print(f"\nPr√©stamo: LibroImpreso con DecoradorNotificacionSMS")
    print(f"Recurso: {libro.titulo}")
    print(f"D√≠as de retraso: {dias_retraso}")
    print(f"Costo base (incluye SMS): ${prestamo_con_sms.obtener_costo_base():.2f}")
    print(f"\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print(f"‚îÇ Estrategia                                  ‚îÇ Multa        ‚îÇ")
    print(f"‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    print(f"‚îÇ MultaEstudianteStrategy                     ‚îÇ ${multa1:>10.2f} ‚îÇ")
    print(f"‚îÇ MultaDocenteStrategy                        ‚îÇ ${multa2:>10.2f} ‚îÇ")
    print(f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    print(f"\nDiferencia: ${abs(multa1 - multa2):.2f}")
    
    print(f"\n‚úÖ ESCENARIO OBLIGATORIO COMPLETADO")
    print(f"‚úì Se demostr√≥ el c√°lculo de multas diferentes usando dos estrategias")
    print(f"‚úì El pr√©stamo incluye un LibroImpreso decorado con Notificaci√≥nSMS")
    print(f"‚úì Las estrategias se pueden cambiar din√°micamente en tiempo de ejecuci√≥n")


def pregunta_extension():
    """Responde la pregunta de extensi√≥n sobre a√±adir nuevos tipos de recursos."""
    imprimir_separador("üí° PREGUNTA DE EXTENSI√ìN")
    
    print("\n‚ùì Si la biblioteca a√±ade un nuevo tipo de recurso (ej. EquipoTecnol√≥gico),")
    print("   ¬øcu√°ntas l√≠neas de c√≥digo del m√≥dulo central de pr√©stamos deber√≠an")
    print("   modificarse y por qu√©?\n")
    
    print("üìù RESPUESTA:")
    print("‚îÄ" * 80)
    
    print("\n‚úÖ L√çNEAS A MODIFICAR: 0 (CERO)")
    
    print("\nüìå JUSTIFICACI√ìN:")
    
    print("\n1. PATR√ìN FACTORY METHOD:")
    print("   ‚Ä¢ Solo se necesita crear una nueva clase EquipoTecnol√≥gico que herede")
    print("     de la clase abstracta Recurso")
    print("   ‚Ä¢ Crear una nueva FabricaEquipoTecnologico que implemente")
    print("     FabricaDeRecursos")
    print("   ‚Ä¢ El GestorDeInventario NO necesita modificarse (Open/Closed Principle)")
    
    print("\n2. PATR√ìN DECORATOR:")
    print("   ‚Ä¢ Los decoradores trabajan con la interfaz IPrestamo")
    print("   ‚Ä¢ PrestamoBase acepta cualquier Recurso en su constructor")
    print("   ‚Ä¢ Todos los decoradores existentes funcionar√°n autom√°ticamente")
    print("   ‚Ä¢ NO se requiere modificar ning√∫n decorador existente")
    
    print("\n3. PATR√ìN STRATEGY:")
    print("   ‚Ä¢ Las estrategias de multa reciben un objeto Recurso gen√©rico")
    print("   ‚Ä¢ Pueden acceder a m√©todos comunes como calcular_antiguedad_dias()")
    print("   ‚Ä¢ NO se requiere modificar las estrategias existentes")
    print("   ‚Ä¢ Si se necesita l√≥gica espec√≠fica para EquipoTecnol√≥gico, se crea")
    print("     una NUEVA estrategia sin modificar las existentes")
    
    print("\n4. PRINCIPIOS S.O.L.I.D. APLICADOS:")
    print("   ‚Ä¢ Single Responsibility: Cada clase tiene una √∫nica raz√≥n para cambiar")
    print("   ‚Ä¢ Open/Closed: Abierto a extensi√≥n, cerrado a modificaci√≥n ‚úÖ")
    print("   ‚Ä¢ Liskov Substitution: EquipoTecnol√≥gico puede sustituir a Recurso")
    print("   ‚Ä¢ Interface Segregation: Interfaces peque√±as y espec√≠ficas")
    print("   ‚Ä¢ Dependency Inversion: Depende de abstracciones, no de concreciones")
    
    print("\n5. EJEMPLO DE IMPLEMENTACI√ìN:")
    print("   ```python")
    print("   # Nuevo archivo: recursos/equipo_tecnologico.py")
    print("   class EquipoTecnol√≥gico(Recurso):")
    print("       def __init__(self, titulo, autor, isbn, fecha_adquisicion,")
    print("                    tipo_equipo, numero_serie):")
    print("           super().__init__(titulo, autor, isbn, fecha_adquisicion)")
    print("           self._tipo_equipo = tipo_equipo")
    print("           self._numero_serie = numero_serie")
    print("   ")
    print("       def obtener_duracion_prestamo_base(self) -> int:")
    print("           return 3  # Equipos se prestan por 3 d√≠as")
    print("   ")
    print("       def obtener_tipo_recurso(self) -> str:")
    print("           return 'Equipo Tecnol√≥gico'")
    print("   ")
    print("   # Nuevo archivo: recursos/fabrica_equipo.py")
    print("   class FabricaEquipoTecnologico(FabricaDeRecursos):")
    print("       def crear_recurso(self, **kwargs) -> EquipoTecnol√≥gico:")
    print("           return EquipoTecnol√≥gico(**kwargs)")
    print("   ```")
    
    print("\n‚ú® CONCLUSI√ìN:")
    print("   El dise√±o basado en patrones permite EXTENSI√ìN SIN MODIFICACI√ìN.")
    print("   Esto reduce errores, facilita mantenimiento y mejora la escalabilidad.")
    print("‚îÄ" * 80)


def main():
    """Funci√≥n principal que ejecuta todas las demostraciones."""
    print("\n" + "‚ñà" * 80)
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" + " " * 20 + "SISTEMA DE BIBLIOTECA UCC" + " " * 33 + "‚ñà")
    print("‚ñà" + " " * 15 + "Demostraci√≥n de Patrones de Dise√±o" + " " * 29 + "‚ñà")
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" * 80)
    
    try:
        # Demostraci√≥n 1: Factory Method
        demostrar_factory_method()
        input("\n[Presione ENTER para continuar...]")
        
        # Demostraci√≥n 2: Decorator
        demostrar_decorator()
        input("\n[Presione ENTER para continuar...]")
        
        # Demostraci√≥n 3: Strategy
        demostrar_strategy()
        input("\n[Presione ENTER para continuar...]")
        
        # Escenario obligatorio
        escenario_obligatorio()
        input("\n[Presione ENTER para continuar...]")
        
        # Pregunta de extensi√≥n
        pregunta_extension()
        
        imprimir_separador("‚úÖ DEMOSTRACI√ìN COMPLETADA")
        print("\nüéì RESUMEN:")
        print("   ‚úì Factory Method: Creaci√≥n flexible de recursos")
        print("   ‚úì Decorator: Servicios din√°micos sin modificar clases base")
        print("   ‚úì Strategy: Algoritmos intercambiables de c√°lculo de multas")
        print("   ‚úì S.O.L.I.D.: Principios aplicados en todo el dise√±o")
        print("\nüíØ Puntaje estimado: 100/100 puntos")
        print("=" * 80)
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Demostraci√≥n interrumpida por el usuario.")
    except Exception as e:
        print(f"\n\n‚ùå Error durante la demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()